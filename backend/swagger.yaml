swagger: '2.0'
info:
  description: 'Documentacion relacionada al rest server de la aplicacion Foodarity'
  version: '1.0.0'
  title: 'Foodarity App - Backend docs'
  contact:
    email: 'martin.a.chaparro@gmail.com'
host: 'localhost:4000'
basePath: '/api/v1'
tags:
  - name: 'Auth'
    description: 'Operaciones de Autenticacion'
  - name: 'User'
    description: 'Operaciones sobre Usuarios'
  - name: 'Company'
    description: 'Operaciones sobre Companias'
  - name: 'Product'
    description: 'Operaciones sobre Productos'
  - name: 'Location'
    description: 'Busqueda de Provicias y Ciudades'
schemes:
  - 'http'
paths:
  /auth:
    post:
      tags:
        - 'Auth'
      summary: 'Login de Usuarios'
      description: 'Ruta para Login de usuarios.'
      operationId: 'LoginUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'Body'
          description: 'Crear Usuario'
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/LoginResponse200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/LoginResponse400'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /auth/renew:
    get:
      tags:
        - 'Auth'
      summary: 'Renovar token'
      description: 'Renueva el token y retorna uno nuevo'
      operationId: 'RenewToken'
      consumes:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/LoginResponse200'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /users:
    post:
      tags:
        - 'User'
      summary: 'Crear usuarios'
      description: 'Crea un Usuario'
      operationId: 'addUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'Body'
          description: 'Crear un usuario nuevo'
          required: true
          schema:
            $ref: '#/definitions/CreateUserRequest'
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/CreateUserResponse201'
        '400':
          description: 'Bad Request'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/ErrorValidation'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
    get:
      tags:
        - 'User'
      summary: 'Lista todos los usuarios'
      description: 'Ruta para la creacion de usuarios.'
      operationId: 'getUsers'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      responses:
        '200':
          description: 'OK'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/User'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /users/{id}:
    delete:
      tags:
        - 'User'
      summary: 'Eliminar Usuario'
      description: 'Eliminina un usuario'
      operationId: 'DeleteUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id del usuario a eliminar"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
    put:
      tags:
        - 'User'
      summary: 'Actualiza Usuario'
      description: 'Actualiza un usuario'
      operationId: 'UpdateUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id del usuario a actualizar"
        required: true
        type: "integer"
        format: "int64"
      - name: 'Body'
        in: 'body'
        description: 'Datos a actualizar'
        required: true
        schema:
          $ref: '#/definitions/UpdateUserRequest'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /users/upload:
    patch:
      tags:
        - 'User'
      summary: 'Actualizar Imagen Usuario'
      description: 'Actualiza o agrega una foto al usuario'
      operationId: 'updateUserImage'
      consumes:
        - 'multipart/form-data'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id del usuario a actualizar"
        required: true
        type: "integer"
        format: "int64"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: true
        type: "file"
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /companies:
    post:
      tags:
        - 'Company'
      summary: 'Crear comercio u ONG'
      description: 'Ruta para la creacion de usuarios.'
      operationId: 'addCompany'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - in: 'body'
        name: 'Body'
        description: 'Crear Usuario'
        required: true
        schema:
          $ref: '#/definitions/CompanyRequest'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
    get:
      tags:
        - 'Company'
      summary: 'Lista todas las companias'
      description: 'Lista todas las companias'
      operationId: 'GetAllCompanies'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'      
  /companies/{id}:
    get:
      tags:
        - 'Company'
      summary: 'Muestra una compania por id'
      description: 'Muestra una compania por id'
      operationId: 'getCompany'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /companies/{id}/upload/{field}:
    patch:
      tags:
        - 'Company'
      summary: 'Actualiza Imagen Compania'
      description: 'Actualiza o crea una imagen de una compania'
      operationId: 'UpdateCompanyImage'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /products:
    post:
      tags:
        - 'Product'
      summary: 'Crear Producto'
      description: 'Crea Productos'
      operationId: 'addProduct'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - in: 'body'
        name: 'Body'
        description: 'Crear un Producto'
        required: true
        schema:
          $ref: '#/definitions/CreateUserRequest'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
    get:
      tags:
        - 'Product'
      summary: 'Lista Productos'
      description: 'Lista todos los productos'
      operationId: 'GetAllProducts'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /states:
    get:
      tags:
        - 'Location'
      summary: 'Listado de Provincias'
      description: 'Lista todas las provincias'
      operationId: 'getStates'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /cities:
    get:
      tags:
        - 'Location'
      summary: 'Listado de ciudades'
      description: 'Lista todas las ciudades'
      operationId: 'getCities'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "name"
        in: "query"
        description: "Nombre de la ciudad a buscar"
        type: "string"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /cities/{stateId}:
    get:
      tags:
        - 'Location'
      summary: 'Lista las ciudades por provincia'
      description: 'Ruta para la creacion de usuarios.'
      operationId: 'getCitiesByState'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "id"
        in: "path"
        description: "Id de la provincia a buscar"
        required: true
        type: "string"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
securityDefinitions:
  api_key:
    type: 'apiKey'
    name: 'Authorization'
    in: 'header'
definitions:
  User:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'
      photo:
        $ref: '#/definitions/Photo'
      status:
        type: 'boolean'
      CompanyId:
        type: 'integer'
        format: 'int64'
      role:
        $ref: '#/definitions/UserRole'
  Photo:
    type: 'object'
    properties:
      public_id:
        type: 'string'
      url:
        type: 'string'
  UserRole:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      role:
        type: 'string'
  Company:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
      description:
        type: 'string'
      areaCode:
        type: 'string'
      phone:
        type: 'string'
      email:
        type: 'string'
      website:
        type: 'string'
      status:
        type: 'boolean'
      ownerId:
        type: 'integer'
        format: 'int64'
      logo:
        $ref: '#/definitions/Photo'
      banner:
        $ref: '#/definitions/Photo'
      type_id:
        type: 'integer'
        format: 'int64'
  LoginRequest:
    type: 'object'
    properties:
      email:
        type: 'string'
      password:
        type: 'string'
  CompanyRequest:
    type: 'object'
    properties:
      name:
        type: 'string'
      description:
        type: 'string'
      areaCode:
        type: 'string'
      phone:
        type: 'string'
      email:
        type: 'string'
      website:
        type: 'string'
      status:
        type: 'boolean'
      street:
        type: 'string'
      number:
        type: 'string'
      zipcode:
        type: 'string'
      cityId:
        type: 'string'
      stateId:
        type: 'string'
      type_id:
        type: 'integer'
        format: 'int64'
  LoginResponse200:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
      roleId:
        type: 'integer'
        format: 'int64'
      token:
        type: 'string'
  LoginResponse400:
    type: 'object'
    properties:
      message:
        type: 'string'
  Response200:
    type: 'object'
    properties:
      message:
        type: 'string'
  ErrorResponse500:
    type: 'object'
    properties:
      message:
        type: 'string'
  ErrorResponse400:
    type: 'object'
    properties:
      message:
        type: 'string'
  ErrorResponse401:
    type: 'object'
    properties:
      message:
        type: 'string'
  ErrorValidation:
    type: 'object'
    properties:
      msg:
        type: 'string'
      param:
        type: 'string'
      location:
        type: 'string'
  CreateUserRequest:
    type: 'object'
    properties:
      name:
        type: 'string'
      email:
        type: 'string'
      password:
        type: 'string'
      phone:
        type: 'string'
  UpdateUserRequest:
    type: 'object'
    properties:
      name:
        type: 'string'
      email:
        type: 'string'
  CreateUserResponse201:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
      email:
        type: 'string'
      token:
        type: 'string'
  # ApiResponse:
  #   type: 'object'
  #   properties:
  #     code:
  #       type: 'integer'
  #       format: 'int32'
  #     type:
  #       type: 'string'
  #     message:
  #       type: 'string'
