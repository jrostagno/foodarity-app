{"version":3,"file":"react-imask.js","sources":["../src/mixin.ts","../src/input.ts","../src/hook.ts"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IMask from 'imask';\n\n\nexport\ntype Falsy = false | 0 | \"\" | null | undefined;\n\nexport\ntype MaskedElement = HTMLInputElement | HTMLTextAreaElement;\n\nexport\ntype ReactMaskProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n> = {\n  onAccept?: (value: Value, maskRef: IMask.InputMask<Opts>, e?: InputEvent) => void;\n  onComplete?: (value: Value, maskRef: IMask.InputMask<Opts>, e?: InputEvent) => void;\n  unmask?: Unmask;\n  value?: Value;\n  inputRef: (el: MaskedElement) => void;\n}\n\nconst MASK_PROPS: { [key in keyof (IMask.AllMaskedOptions & ReactMaskProps)]: unknown } = {\n  // common\n  mask: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.instanceOf(RegExp),\n    PropTypes.oneOf([Date, Number, IMask.Masked]),\n    PropTypes.instanceOf(IMask.Masked),\n  ]),\n  value: PropTypes.any,\n  unmask: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['typed']),\n  ]),\n  prepare: PropTypes.func,\n  validate: PropTypes.func,\n  commit: PropTypes.func,\n  overwrite: PropTypes.bool,\n\n  // events\n  onAccept: PropTypes.func,\n  onComplete: PropTypes.func,\n\n  // pattern\n  placeholderChar: PropTypes.string,\n  lazy: PropTypes.bool,\n  definitions: PropTypes.object,\n  blocks: PropTypes.object,\n\n  // date\n  pattern: PropTypes.string,\n  format: PropTypes.func,\n  parse: PropTypes.func,\n  autofix: PropTypes.bool,\n\n  // number\n  radix: PropTypes.string,\n  thousandsSeparator: PropTypes.string,\n  mapToRadix: PropTypes.arrayOf(PropTypes.string),\n  scale: PropTypes.number,\n  signed: PropTypes.bool,\n  normalizeZeros: PropTypes.bool,\n  padFractionalZeros: PropTypes.bool,\n  min: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.instanceOf(Date),\n  ]),\n  max: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.instanceOf(Date),\n  ]),\n\n  // dynamic\n  dispatch: PropTypes.func,\n\n  // ref\n  inputRef: PropTypes.func\n};\n\nconst MASK_PROPS_NAMES = Object.keys(MASK_PROPS);\nconst NON_MASK_OPTIONS_PROPS_NAMES = ['value', 'unmask', 'onAccept', 'onComplete', 'inputRef'];\nconst MASK_OPTIONS_PROPS_NAMES = MASK_PROPS_NAMES.filter(pName =>\n  NON_MASK_OPTIONS_PROPS_NAMES.indexOf(pName) < 0\n);\n\nexport type IMaskMixinProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n> = IMask.AllMaskedOptions & ReactMaskProps<Opts, Unmask, Value>;\nexport type IMaskInputProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n> = MaskedElement & IMaskMixinProps<Opts, Unmask, Value>;\n\nexport default function IMaskMixin<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n>(ComposedComponent: React.ComponentType<IMaskMixinProps<Opts, Unmask, Value>>): React.ComponentType {\n  const MaskedComponent = class extends React.Component<IMaskInputProps<Opts, Unmask, Value>> {\n    static displayName: string;\n    static propTypes: typeof MASK_PROPS;\n    \n    element: MaskedElement;\n    maskRef: IMask.InputMask<Opts>;\n    \n    constructor (props: IMaskInputProps<Opts, Unmask, Value>) {\n      super(props);\n      this._inputRef = this._inputRef.bind(this);\n    }\n\n    componentDidMount () {\n      if (!this.props.mask) return;\n\n      this.initMask();\n    }\n\n    componentDidUpdate () {\n      const props = this.props;\n      const maskOptions = this._extractMaskOptionsFromProps(props);\n      if (maskOptions.mask) {\n        if (this.maskRef) {\n          this.maskRef.updateOptions(maskOptions as Partial<Opts>); // TODO\n          if ('value' in props &&\n            (props.value !== this.maskValue ||\n              // handle cases like Number('') === 0,\n              // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\n              (typeof props.value !== 'string' && this.maskRef.value === '') &&\n                !this.maskRef.el.isActive)\n          ) {\n            this.maskValue = props.value;\n          }\n        } else {\n          this.initMask(maskOptions as Opts); // TODO\n        }\n      } else {\n        this.destroyMask();\n        if ('value' in props) this.element.value = props.value;\n      }\n    }\n\n    componentWillUnmount () {\n      this.destroyMask();\n    }\n\n    _inputRef (el: MaskedElement){\n      this.element = el;\n      if (this.props.inputRef) this.props.inputRef(el);\n    }\n\n    initMask (maskOptions: Opts = this._extractMaskOptionsFromProps(this.props) as Opts) {\n      this.maskRef = IMask(this.element, maskOptions)\n        .on('accept', this._onAccept.bind(this))\n        .on('complete', this._onComplete.bind(this));\n\n      if ('value' in this.props) this.maskValue = this.props.value;\n    }\n\n    destroyMask () {\n      if (this.maskRef) {\n        this.maskRef.destroy();\n        delete this.maskRef;\n      }\n    }\n\n    _extractMaskOptionsFromProps (props: IMaskInputProps<Opts, Unmask, Value>): Opts {\n      const { ...cloneProps } = props;\n\n      // keep only mask options props\n      (Object.keys(cloneProps) as Array<keyof IMaskInputProps<Opts, Unmask, Value>>)\n        .filter(prop => MASK_OPTIONS_PROPS_NAMES.indexOf(prop) < 0)\n        .forEach(nonMaskProp => {\n          delete cloneProps[nonMaskProp];\n        });\n\n      return cloneProps as unknown as Opts;\n    }\n\n    _extractNonMaskProps (props: IMaskInputProps<Opts, Unmask, Value>) {\n      const { ...cloneProps } = props;\n\n      (MASK_PROPS_NAMES as Array<keyof IMaskInputProps<Opts, Unmask, Value>>).forEach(maskProp => {\n        delete cloneProps[maskProp];\n      });\n\n      return cloneProps;\n    }\n\n    get maskValue (): Value {\n      if (this.props.unmask === 'typed') return this.maskRef.typedValue as unknown as Value;\n      if (this.props.unmask) return this.maskRef.unmaskedValue as unknown as Value;\n      return this.maskRef.value as unknown as Value;\n    }\n\n    set maskValue (value: Value) {\n      value = (value == null ? '' : value) as Value;\n      if (this.props.unmask === 'typed') this.maskRef.typedValue = value as unknown as IMask.MaskedTypedValue<Opts['mask']>;\n      else if (this.props.unmask) this.maskRef.unmaskedValue = value as unknown as string;\n      else this.maskRef.value = value as unknown as string;\n    }\n\n    _onAccept (e?: InputEvent) {\n      if (this.props.onAccept) this.props.onAccept(this.maskValue, this.maskRef, e);\n    }\n\n    _onComplete (e?: InputEvent) {\n      if (this.props.onComplete) this.props.onComplete(this.maskValue, this.maskRef, e);\n    }\n\n    render () {\n      return React.createElement(ComposedComponent, {\n        ...this._extractNonMaskProps(this.props),\n        inputRef: this._inputRef,\n      });\n    }\n  };\n\n  const nestedComponentName = ComposedComponent.displayName || ComposedComponent.name || 'Component';\n  MaskedComponent.displayName = `IMask(${nestedComponentName})`;\n  MaskedComponent.propTypes = MASK_PROPS;\n\n  return MaskedComponent;\n}\n","import React from 'react';\nimport IMask from 'imask';\nimport IMaskMixin, { IMaskInputProps, Falsy } from './mixin';\n\n\nconst InputComponent = <\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n>({ inputRef, ...props }: IMaskInputProps<Opts, Unmask, Value>) =>\n  React.createElement('input', {\n    ...props,\n    ref: inputRef\n  });\n\n\nconst IMaskInput = IMaskMixin(InputComponent);\nexport default IMaskInput;\n","import IMask from 'imask';\nimport { useEffect, useRef } from 'react';\nimport type { MutableRefObject } from 'react';\nimport type { ReactMaskProps, MaskedElement, Falsy } from './mixin';\n\n\nexport default\nfunction useIMask<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n>(\n  opts: Opts,\n  { onAccept, onComplete }: Pick<ReactMaskProps<Opts, Unmask, Value>, 'onAccept' | 'onComplete'> = {}\n): {\n  ref: MutableRefObject<MaskedElement>,\n  maskRef: MutableRefObject<IMask.InputMask<Opts>>,\n} {\n  const ref = useRef(null);\n  const maskRef = useRef(null);\n\n\n  // methods\n  function _initMask () {\n    const el = ref.current;\n\n    if (!el || !opts?.mask) return;\n\n    maskRef.current = IMask(el, opts)\n      .on('accept', _onAccept)\n      .on('complete', _onComplete);\n\n    if (el.defaultValue !== maskRef.current.value) {\n      _onAccept();\n    }\n  }\n\n  function _destroyMask () {\n    if (maskRef.current) {\n      maskRef.current.destroy();\n      maskRef.current = null;\n    }\n  }\n\n  function _onAccept () {\n    if (onAccept) onAccept(maskRef.current.value, maskRef.current);\n  }\n\n  function _onComplete () {\n    if (onComplete) onComplete(maskRef.current.value, maskRef.current);\n  }\n\n\n  // lifecycle\n  useEffect(() => {\n    const el = ref.current;\n    if (!el || !opts?.mask) return _destroyMask();\n\n    const mask = maskRef.current;\n    if (!mask) {\n      _initMask();\n    } else {\n      mask.updateOptions(opts);\n    }\n  }, [opts]);\n\n  useEffect(() => _destroyMask, []);\n\n\n  return {\n    ref, maskRef,\n  };\n}\n"],"names":["MASK_PROPS","mask","PropTypes","oneOfType","array","func","string","instanceOf","RegExp","oneOf","Date","Number","IMask","Masked","value","any","unmask","bool","prepare","validate","commit","overwrite","onAccept","onComplete","placeholderChar","lazy","definitions","object","blocks","pattern","format","parse","autofix","radix","thousandsSeparator","mapToRadix","arrayOf","scale","number","signed","normalizeZeros","padFractionalZeros","min","max","dispatch","inputRef","MASK_PROPS_NAMES","Object","keys","NON_MASK_OPTIONS_PROPS_NAMES","MASK_OPTIONS_PROPS_NAMES","filter","pName","indexOf","IMaskMixin","ComposedComponent","MaskedComponent","props","_inputRef","bind","initMask","maskOptions","_extractMaskOptionsFromProps","maskRef","updateOptions","maskValue","el","isActive","destroyMask","element","on","_onAccept","_onComplete","destroy","cloneProps","prop","forEach","nonMaskProp","maskProp","typedValue","unmaskedValue","e","React","createElement","_extractNonMaskProps","Component","nestedComponentName","displayName","name","propTypes","InputComponent","ref","IMaskInput","useIMask","opts","useRef","_initMask","current","defaultValue","_destroyMask","useEffect"],"mappings":"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"}