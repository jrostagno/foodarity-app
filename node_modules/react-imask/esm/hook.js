import IMask from 'imask/esm/imask';
import { useRef, useEffect } from 'react';

function useIMask(opts) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      onAccept = _ref.onAccept,
      onComplete = _ref.onComplete;

  var ref = useRef(null);
  var maskRef = useRef(null); // methods

  function _initMask() {
    var el = ref.current;
    if (!el || !(opts !== null && opts !== void 0 && opts.mask)) return;
    maskRef.current = IMask(el, opts).on('accept', _onAccept).on('complete', _onComplete);

    if (el.defaultValue !== maskRef.current.value) {
      _onAccept();
    }
  }

  function _destroyMask() {
    if (maskRef.current) {
      maskRef.current.destroy();
      maskRef.current = null;
    }
  }

  function _onAccept() {
    if (onAccept) onAccept(maskRef.current.value, maskRef.current);
  }

  function _onComplete() {
    if (onComplete) onComplete(maskRef.current.value, maskRef.current);
  } // lifecycle


  useEffect(function () {
    var el = ref.current;
    if (!el || !(opts !== null && opts !== void 0 && opts.mask)) return _destroyMask();
    var mask = maskRef.current;

    if (!mask) {
      _initMask();
    } else {
      mask.updateOptions(opts);
    }
  }, [opts]);
  useEffect(function () {
    return _destroyMask;
  }, []);
  return {
    ref: ref,
    maskRef: maskRef
  };
}

export { useIMask as default };
