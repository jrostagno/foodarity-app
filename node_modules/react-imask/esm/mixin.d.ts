import React from 'react';
import IMask from 'imask';
export declare type Falsy = false | 0 | "" | null | undefined;
export declare type MaskedElement = HTMLInputElement | HTMLTextAreaElement;
export declare type ReactMaskProps<Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions, Unmask extends ('typed' | boolean) = false, Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] : Unmask extends Falsy ? IMask.InputMask<Opts>['value'] : IMask.InputMask<Opts>['unmaskedValue']> = {
    onAccept?: (value: Value, maskRef: IMask.InputMask<Opts>, e?: InputEvent) => void;
    onComplete?: (value: Value, maskRef: IMask.InputMask<Opts>, e?: InputEvent) => void;
    unmask?: Unmask;
    value?: Value;
    inputRef: (el: MaskedElement) => void;
};
export declare type IMaskMixinProps<Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions, Unmask extends ('typed' | boolean) = false, Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] : Unmask extends Falsy ? IMask.InputMask<Opts>['value'] : IMask.InputMask<Opts>['unmaskedValue']> = IMask.AllMaskedOptions & ReactMaskProps<Opts, Unmask, Value>;
export declare type IMaskInputProps<Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions, Unmask extends ('typed' | boolean) = false, Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] : Unmask extends Falsy ? IMask.InputMask<Opts>['value'] : IMask.InputMask<Opts>['unmaskedValue']> = MaskedElement & IMaskMixinProps<Opts, Unmask, Value>;
export default function IMaskMixin<Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions, Unmask extends ('typed' | boolean) = false, Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] : Unmask extends Falsy ? IMask.InputMask<Opts>['value'] : IMask.InputMask<Opts>['unmaskedValue']>(ComposedComponent: React.ComponentType<IMaskMixinProps<Opts, Unmask, Value>>): React.ComponentType;
